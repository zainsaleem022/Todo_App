name: Docker Image CI/CD
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # Build and Push Backend Docker Image
      - name: Build backend Docker image
        run: docker build ./backend --file ./backend/Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/todo-backend-image:latest

      - name: Push backend Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/todo-backend-image:latest

      # Build and Push Frontend Docker Image
      - name: Build frontend Docker image
        run: docker build ./frontend --file ./frontend/Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/todo-frontend-image:latest

      - name: Push frontend Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/todo-frontend-image:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Set up SSH access to EC2 instance
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Deploy to EC2
      - name: Deploy to EC2
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          PGUSER: ${{ secrets.PGUSER }}
          PGHOST: ${{ secrets.PGHOST }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGPORT: ${{ secrets.PGPORT }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << EOF
            # Pull the latest Docker images
            docker pull $DOCKERHUB_USERNAME/todo-backend-image:latest
            docker pull $DOCKERHUB_USERNAME/todo-frontend-image:latest
          EOF
